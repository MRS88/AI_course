'''Задача 1
Напишите код, который вычисляет значение следующей математической функции в зависимости от переменной х, где х - вектор
F(x)=1/25*A*A**Tx+Bx+5 
Создайте матрицы A и B размера 4 на 4, состоящие из случайных целых чисел в интервале от 1 до 10 (используйте соответствующую функцию модуля np.random)
Создайте вектор х размера 4, состоящие из случайных целых чисел в интервале от 1 до 5
Перемножение матриц, и матрицы на вектор должно быть матричное.'''

import numpy as np

A = np.random.randint(10, size=(4,4))
B = np.random.randint(10, size=(4,4))
x = np.arange(1, 5)
F = A @ A.T @ x * 0.04 + B @ x + 5
F


'''Задача 2
Напишите функцию, которая находит все точки пересечения нуля заданной одномерной математической функции и отображает их на графике функции красными кругами'''

import matplotlib.pyplot as plt

def func():
  '''
  Поиск пересечений функции с 0 с помощью смены знака функции.
  Так как значения "х" не будут гарантировать y(x) = 0, 
  точки пересечения на графике приближенны к 0. Точность их зависит от шага.
  '''
  x = np.linspace(-10,10,10000)
  y = np.sin(x)
  s = np.sign(y)
  zeroes = []
  for i in range(len(y)):
    if s[i-1] + s[i] == 0:
      zeroes.append(i)
  # удаляем нулевой индекс, т.к. будет считаться за смену знака  
  zeroes = zeroes[1:]
  plt.plot(x, y)
  plt.plot([x[i] for i in zeroes], [y[i] for i in zeroes],'ro')
  plt.grid()
  plt.title('Функция и её нули')
  plt.show()

func()  


'''Задача 3
Напишите функцию, которая получает на вход пару матриц и проверяет закон коммутативности матричного умножения, 
то есть свойства  A∗B=B∗A , возвращая 1 в случае подтверждения и 0 в противном случае. 
Поставьте 1000 экспериментов для случайных целочисленных матриц размера (5,5) элементов, 
которые принадлежат отрезку [-5,5], и найдите количество успешных срабатываний.'''

def commut():
  M = np.random.randint(-5, 6, size=(5,5))
  N = np.random.randint(-5, 6, size=(5,5))
  A = np.dot(M, N)
  B = np.dot(N, M)
  if np.equal(A, B).all(): return 1
  else: return 0 

def experiments():
  count = 0
  for i in range(1000):
    if commut() == 1: count += 1
  return count

print(experiments())  
