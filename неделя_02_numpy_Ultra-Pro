'''
Задача 1
Создайте единичную матрицу размером 5*5.
Должна получиться матрица вида:

1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1

Действовать можно двумя путями:
Используя соответствующий метод Numpy. (О нем не говорилось в занятии. Стоит обратиться к документации Numpy)
Если первый вариант сложный, можно создать массив из нулей, используя метод, о котором говорилось в занятии. В цикле заменить все элементы по диагонали на единицы.'''

import numpy as np

np.eye(5, dtype=int)


'''Задача 2
Создайте массив из случайных значений из стандартного нормального распределения размера 6 на 6.
"Разверните" массив таким образом, чтобы его размер стал 36 на 1 Найдите среднее значение элементов массива
Разрешается использовать только методы Numpy. (Циклы и условия запрещены)'''

arr = np.random.normal(0,1,(6,6)).round(2) # округление опционально, для улучшения восприятия
print(arr)
print()
print(arr.reshape(36,).mean())


'''Задача 3
Создайте массив из 20 любых случайных значений, используя метод Numpy. При помощи срезов и операций с массивами найдите значения производных для созданного массива'''

arr_diff = np.random.random((20)).round(2)
print(arr_diff)
print()
# первый и самый простой способ
print(np.diff(arr_diff))
print()
# второй способ
diff_list = []
for i in range(len(arr_diff)):
  try:
    res = arr_diff[i+1] - arr_diff[i]
    diff_list.append(res.round(2))
  except IndexError:
    pass
print(np.array(diff_list))   


'''Задача 4
Дано выражение
Y = A * X * C
Создайте три случайных массива: A, C, X. Размерности должны позволять выполнить матричное умножение, согласно формуле. 
На выходе должен получиться массив Y с размерностью (5, 18). (Остальные размерности возьмите на свое усмотрение)'''

A = np.random.randint(1, 3, (5, 3))
X = np.random.randint(1, 3, (3, 6))
C = np.random.randint(1, 3, (6, 18))
Y = A.dot(X).dot(C)
print(Y.shape)
Y


'''Задача 5
Загрузите какой-либо файл с данными (таблица Excel с Вашего компьютера, сохранненая в формате csv, или таблица из Интернета). Выведите:
Всю информацию из файла в ячейку.
Размерность данных
Среднее арифметическое от всех числовых значений (если есть)
Число столбов
Число строк
Типы данных всех значений'''

import numpy as np
import csv 

filename = 'titanic (1).csv'
with open(filename) as f:
  reader = csv.reader(f)
  file_list = list(reader)

file_arr = np.array(file_list[:10]) # сократил до 10 строк вместо 892 фактических
print(file_arr)
print('размер массива:', file_arr.shape)

# находим числовые данные и среднее арифметическое
num_list = []
for num in np.nditer(file_arr):
  try:
    if float(num):
      num_list.append(float(num))
  except ValueError:
    pass
np.mean(num_list)

# эта задача решается с помощью .shape. Так как в случае массива с одной строкой
# при вызове .shape[1] будет ошибка 'out of index'. Возможно есть метод, что 
# возвращает количество строк и столбцов, но я не нашел его. 
print('количество строк:', file_arr.shape[0])
print('количество столбцов:', file_arr.shape[1])

file_arr.dtype
