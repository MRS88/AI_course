'''Задача 1
Напишите функцию умножения трёх матриц (не пользуйтесь встроенными функциями такими как np.dot(), @)'''

import numpy as np


def my_matrix(matrix1, matrix2, matrix3):

  #функция матричного умножения, принемающая на вход 2 матрицы
  def prod_matrix_1():
    shape1 = matrix1.shape # определим форму 1-ой матрицы
    shape2 = matrix2.shape # определим форму 2-ой матрицы
    
    if (shape1[1] != shape2[0]): #если количество столбцов 1-ой матрицы не равно количеству строк 2-ой матрицы
      return np.array([])        #возвращаем пустой массив
    
    out_matrix = np.zeros((shape1[0], shape2[1])) #создадим матрицу из 0, формой (количество строк 1-ой)Х(количество столбцов 2-ой) матриц
    
    for i in range(shape1[0]): #пройдемся по индексам строк 1-ой матрицы
      for j in range(shape2[1]): #пройдемся по индексам столбцов 2-ой матрицы
        curr_cell = 0
        for t in range(shape1[1]): #пройдемся по индексам стобцов 1-ой матрицы
          curr_cell += matrix1[i,t] * matrix2[t,j] #посчитаем сумму произведения элементов строки 1-ой матрицы и столбцов 2-ой матрицы
        out_matrix[i,j] = curr_cell #заменим значения в матрице состоящих из 0, на посчитанную сумму произведений
    
    return out_matrix #вернем полученную матрицу

  def prod_matrix_2():
    shape1 = prod_matrix_1().shape # определим форму 1-ой матрицы
    shape2 = matrix3.shape # определим форму 2-ой матрицы
    
    if (shape1[1] != shape2[0]): #если количество столбцов 1-ой матрицы не равно количеству строк 2-ой матрицы
      return np.array([])        #возвращаем пустой массив
    
    out_matrix = np.zeros((shape1[0], shape2[1])) #создадим матрицу из 0, формой (количество строк 1-ой)Х(количество столбцов 2-ой) матриц
    
    for i in range(shape1[0]): #пройдемся по индексам строк 1-ой матрицы
      for j in range(shape2[1]): #пройдемся по индексам столбцов 2-ой матрицы
        curr_cell = 0
        for t in range(shape1[1]): #пройдемся по индексам стобцов 1-ой матрицы
          curr_cell += prod_matrix_1()[i,t] * matrix3[t,j] #посчитаем сумму произведения элементов строки 1-ой матрицы и столбцов 2-ой матрицы
        out_matrix[i,j] = curr_cell #заменим значения в матрице состоящих из 0, на посчитанную сумму произведений
    
    return out_matrix #вернем полученную матрицу

  return prod_matrix_2()

matrix1 = np.array([[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]]) #определим матрицу 4х3
matrix2 = np.array([[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]) #определим матрицу 3х4
matrix3 = np.array([[5, 11], [4, 7], [13, 6], [9, 1]]) #определим матрицу 4x2

print(my_matrix(matrix1, matrix2, matrix3))

print(matrix1 @ matrix2 @ matrix3)


'''Задача 2
Напишите функцию, которая считает разницу между максимальным и минимальным элементами матрицы'''

def differ(matrix):
  return np.max(matrix) - np.min(matrix)

print(differ(matrix3)) 


'''Задача 3
Напишите функцию, котораяумножает матрицу на транспорированную матрицу 
(пользуйтесь встроенными функциями такими как np.dot(), @, T)
получает обратную матрицу от результата'''

def func(matrix):
  matrix = np.dot(matrix, matrix.T)
  return np.linalg.inv(matrix)

print(func(matrix3))  



'''Задача 4
Напишите и отобразите функцию y = x * x * x/12 + x * (x-15) - 72 на отрезке -10; 10'''

import matplotlib.pyplot as plt


def task_4(a, b):
  x = np.arange(a, b)
  y =  x * x * x/12 + x * (x-15) - 72
  plt.plot(x, y)
  plt.grid()
  plt.show()

task_4(-10, 10)  


'''Задача 5
Отобразите ту же функцию на отрезке -10; 10, но с шагом 0.1 по оси x'''

def task_4(a, b, s=1):
  x = np.arange(a, b, s)
  y =  x * x * x/12 + x * (x-15) - 72
  plt.plot(x, y)
  plt.grid()
  plt.show()

task_4(-10, 10, 0.1)
